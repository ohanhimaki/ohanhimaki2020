// Generated by https://quicktype.io

export interface GitHubEvent {
  id: string
  type: string
  actor: Actor
  repo: GitHubEventRepo
  payload: Payload
  public: boolean
  created_at: string
}

export interface Actor {
  id: number
  login: DisplayLogin
  display_login: DisplayLogin
  gravatar_id: string
  url: string
  avatar_url: string
}

export enum DisplayLogin {
  Ohanhimaki = "ohanhimaki",
  OlliHanhimäki = "Olli Hanhimäki",
}

export interface Payload {
  push_id?: number
  size?: number
  distinct_size?: number
  ref?: Ref
  head?: string
  before?: string
  commits?: Commit[]
  action?: Action
  number?: number
  pull_request?: PullRequest
  issue?: Issue
  comment?: Comment
  ref_type?: string
  pusher_type?: string
}

export enum Action {
  Closed = "closed",
  Created = "created",
  Opened = "opened",
}

export interface Comment {
  url: string
  html_url: string
  issue_url: string
  id: number
  node_id: string
  user: User
  created_at: string
  updated_at: string
  author_association: AuthorAssociation
  body: string
}

export enum AuthorAssociation {
  Owner = "OWNER",
}

export interface User {
  login: DisplayLogin
  id: number
  node_id: NodeID
  avatar_url: string
  gravatar_id: string
  url: string
  html_url: string
  followers_url: string
  following_url: FollowingURL
  gists_url: GistsURL
  starred_url: StarredURL
  subscriptions_url: string
  organizations_url: string
  repos_url: string
  events_url: EventsURL
  received_events_url: string
  type: Type
  site_admin: boolean
}

export enum EventsURL {
  HTTPSAPIGithubCOMUsersOhanhimakiEventsPrivacy = "https://api.github.com/users/ohanhimaki/events{/privacy}",
}

export enum FollowingURL {
  HTTPSAPIGithubCOMUsersOhanhimakiFollowingOtherUser = "https://api.github.com/users/ohanhimaki/following{/other_user}",
}

export enum GistsURL {
  HTTPSAPIGithubCOMUsersOhanhimakiGistsGistID = "https://api.github.com/users/ohanhimaki/gists{/gist_id}",
}

export enum NodeID {
  MDQ6VXNlcjM5MTI1OTEw = "MDQ6VXNlcjM5MTI1OTEw",
}

export enum StarredURL {
  HTTPSAPIGithubCOMUsersOhanhimakiStarredOwnerRepo = "https://api.github.com/users/ohanhimaki/starred{/owner}{/repo}",
}

export enum Type {
  User = "User",
}

export interface Commit {
  sha: string
  author: Author
  message: string
  distinct: boolean
  url: string
}

export interface Author {
  email: Email
  name: DisplayLogin
}

export enum Email {
  OhanhimakiGmailCOM = "ohanhimaki@gmail.com",
  The39125910OhanhimakiUsersNoreplyGithubCOM = "39125910+ohanhimaki@users.noreply.github.com",
}

export interface Issue {
  url: string
  repository_url: string
  labels_url: string
  comments_url: string
  events_url: string
  html_url: string
  id: number
  node_id: string
  number: number
  title: string
  user: User
  labels: Label[]
  state: State
  locked: boolean
  assignee: null
  assignees: any[]
  milestone: null
  comments: number
  created_at: string
  updated_at: string
  closed_at: null | string
  author_association: AuthorAssociation
  body: string
}

export interface Label {
  id: number
  node_id: string
  url: string
  name: string
  color: string
  default: boolean
  description: string
}

export enum State {
  Closed = "closed",
  Open = "open",
}

export interface PullRequest {
  url: string
  id: number
  node_id: string
  html_url: string
  diff_url: string
  patch_url: string
  issue_url: string
  number: number
  state: State
  locked: boolean
  title: string
  user: User
  body: string
  created_at: string
  updated_at: string
  closed_at: null | string
  merged_at: null | string
  merge_commit_sha: null | string
  assignee: null
  assignees: any[]
  requested_reviewers: any[]
  requested_teams: any[]
  labels: any[]
  milestone: null
  commits_url: string
  review_comments_url: string
  review_comment_url: string
  comments_url: string
  statuses_url: string
  head: Base
  base: Base
  _links: Links
  author_association: AuthorAssociation
  merged: boolean
  mergeable: null
  rebaseable: null
  mergeable_state: string
  merged_by: User | null
  comments: number
  review_comments: number
  maintainer_can_modify: boolean
  commits: number
  additions: number
  deletions: number
  changed_files: number
}

export interface Links {
  self: Comments
  html: Comments
  issue: Comments
  comments: Comments
  review_comments: Comments
  review_comment: Comments
  commits: Comments
  statuses: Comments
}

export interface Comments {
  href: string
}

export interface Base {
  label: string
  ref: string
  sha: string
  user: User
  repo: BaseRepo
}

export interface BaseRepo {
  id: number
  node_id: string
  name: string
  full_name: Name
  private: boolean
  owner: User
  html_url: string
  description: string
  fork: boolean
  url: string
  forks_url: string
  keys_url: string
  collaborators_url: string
  teams_url: string
  hooks_url: string
  issue_events_url: string
  events_url: string
  assignees_url: string
  branches_url: string
  tags_url: string
  blobs_url: string
  git_tags_url: string
  git_refs_url: string
  trees_url: string
  statuses_url: string
  languages_url: string
  stargazers_url: string
  contributors_url: string
  subscribers_url: string
  subscription_url: string
  commits_url: string
  git_commits_url: string
  comments_url: string
  issue_comment_url: string
  contents_url: string
  compare_url: string
  merges_url: string
  archive_url: string
  downloads_url: string
  issues_url: string
  pulls_url: string
  milestones_url: string
  notifications_url: string
  labels_url: string
  releases_url: string
  deployments_url: string
  created_at: string
  updated_at: string
  pushed_at: string
  git_url: string
  ssh_url: string
  clone_url: string
  svn_url: string
  homepage: string
  size: number
  stargazers_count: number
  watchers_count: number
  language: string
  has_issues: boolean
  has_projects: boolean
  has_downloads: boolean
  has_wiki: boolean
  has_pages: boolean
  forks_count: number
  mirror_url: null
  archived: boolean
  disabled: boolean
  open_issues_count: number
  license: License | null
  forks: number
  open_issues: number
  watchers: number
  default_branch: string
}

export enum Name {
  OhanhimakiMitaTanaanSyotaisiinWeb = "ohanhimaki/mita-tanaan-syotaisiin-web",
  OhanhimakiOhanhimaki2020 = "ohanhimaki/ohanhimaki2020",
}

export interface License {
  key: string
  name: string
  spdx_id: string
  url: string
  node_id: string
}

export enum Ref {
  RefsHeadsDevelop = "refs/heads/develop",
  RefsHeadsMaster = "refs/heads/master",
  UIKorjauksia = "ui-korjauksia",
}

export interface GitHubEventRepo {
  id: number
  name: Name
  url: string
}
